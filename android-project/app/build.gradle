def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

def in_abi_filters = []
if (project.hasProperty("armeabi-v7a")) {
    in_abi_filters.add('armeabi-v7a')
}
if (project.hasProperty("arm64-v8a")) {
    in_abi_filters.add('arm64-v8a')
}
if (project.hasProperty("x86")) {
    in_abi_filters.add('x86')
}
if (project.hasProperty("x86_64")) {
    in_abi_filters.add('x86_64')
}
if (!project.hasProperty("armeabi-v7a") && !project.hasProperty("arm64-v8a") && !project.hasProperty("x86") && !project.hasProperty("x86_64")) {
    in_abi_filters = ['armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64']
}

android {
    compileSdkVersion 26
    defaultConfig {
        if (buildAsApplication) {
            applicationId "pw.uyjulian.krkrsdl2"
        }
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_APP_PLATFORM=android-16", "-DANDROID_STL=c++_static"
                abiFilters = []
                abiFilters.addAll(in_abi_filters)
                version "3.18.1"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            // ndkBuild {
            //     path 'jni/Android.mk'
            // }
            cmake {
                path '../../CMakeLists.txt'
            }
        }
       
    }
    lintOptions {
        abortOnError false
    }
    
    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def app_name = "krkrsdl2"
            def architecture = "universal"
            if (in_abi_filters.size() == 1)
            {
                architecture = in_abi_filters[0]
            }
            outputFileName = "${app_name}_${architecture}.apk"
        }
    }

    aaptOptions {
        noCompress '*.xp3'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
